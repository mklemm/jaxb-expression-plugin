<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
		xmlns:tns="http://www.codesup.net/jaxb/plugins/expression"
		targetNamespace="http://www.codesup.net/jaxb/plugins/expression">
	<!--
	  ~ MIT License
	  ~
	  ~ Copyright (c) 2014 Klemm Software Consulting, Mirko Klemm
	  ~
	  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
	  ~ of this software and associated documentation files (the "Software"), to deal
	  ~ in the Software without restriction, including without limitation the rights
	  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	  ~ copies of the Software, and to permit persons to whom the Software is
	  ~ furnished to do so, subject to the following conditions:
	  ~
	  ~ The above copyright notice and this permission notice shall be included in
	  ~ all copies or substantial portions of the Software.
	  ~
	  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	  ~ THE SOFTWARE.
	  -->
	<simpleType name="evaluator-strategy">
		<annotation>
			<documentation>
				Possible values to control the strategy how
				expression evaluators are initialized.
			</documentation>
		</annotation>
		<restriction base="token">
			<enumeration value="none">
				<annotation>
					<documentation>
						Do not create an evaluator instance, instead, copy
						all expressions literally to the generated methods of
						the target class.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="instance">
				<annotation>
					<documentation>
						Initialize an evaluator instance for each instance
						of the generated JAXB target class. The instance will
						be assigned to a generated instance field in the target
						class.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="class-instance">
				<annotation>
					<documentation>
						Initialize a class-scope (static) expression context instance per
						target class. The context instance will be assigned to a generated
						static field in the target class, and the context must have a factory
						method to spawn an object of one evaluator per target class instance.
						This means, initialization code will be executed at the time of
						class initialization as well as at the time of instance initialization,
						which will allow for the greatest possible flexibility in managing
						resources needed to evaluate an expression.
					</documentation>
				</annotation>
			</enumeration>
			<enumeration value="static">
				<annotation>
					<documentation>
						Generate the expression evaluation code in a way that assumes that the evaluator class is a
						utility class.
						I.e. There will be no instance field, all evaluation methods will take the instance of the
						generated entity class as the first parameter, and they will be called statically on the
						evaluator class.
					</documentation>
				</annotation>
			</enumeration>
		</restriction>
	</simpleType>
	<simpleType name="language">
		<restriction base="token">
			<enumeration value="none"/>
			<enumeration value="xml-schema"/>
			<enumeration value="java"/>
		</restriction>
	</simpleType>
	<attributeGroup name="evaluator-ref">
		<attribute name="evaluator-name" type="string" use="optional"/>
		<attribute name="evaluator-method" type="token" use="optional"/>
	</attributeGroup>
	<element name="expression">
		<annotation>
			<documentation>
				Customization element to specify an expression by which an instance of the class
				generated from this complexType should be formatted or otherwise processed.
				The result of this processing will be the return value of the generated method.
			</documentation>
		</annotation>
		<complexType>
			<sequence>
				<any minOccurs="0" namespace="##any">
					<annotation>
						<documentation>
							Arbitrary expression representation that might be more complex or lengthy than the @select
							attribute would permit. If both @select and this element are set, the content of this element
							is used.
						</documentation>
					</annotation>
				</any>
			</sequence>
			<attribute name="select" type="string" use="optional">
				<annotation>
					<documentation>
						Expression string passed to the formatter class. It is up to the formatter
						implementation whether to compile, cache or otherwise process the expression.
						In any case, invocation of the formatting method must return a representation
						of the current instance of the generated class dependent on this expression.
						See below for examples on how to do this with XPath.
						The expression can also be passed as the text content of the expression element.
					</documentation>
				</annotation>
			</attribute>
			<attribute name="method-name" type="token" use="optional">
				<annotation>
					<documentation>
						Name of the method that returns the expression evaluation result.
						In contrast to "name", this defines the method name literally, i.e.
						the method will be named exactly as specified here.
						Not that the exact rules for the contents of this attribute
						are language-specific, whereas "name" allows you to specify a
						name in a language-neutral way.
					</documentation>
				</annotation>
			</attribute>
			<attribute name="method-access" type="string" use="optional">
				<annotation>
					<documentation>
						Access modifiers for the generated method. Default: public
					</documentation>
				</annotation>
			</attribute>
			<attribute name="name" type="NCName" use="optional">
				<annotation>
					<documentation>
						Assigns a name to this expression. The name specifed here
						should follow XML naming conventions, so it doesn't make
						an assumption about the programming language the code is generated in.
						The translation of this name to a method name is then language-specific.
						In generated Java code, for example, this will
						result in a generated method named "getXXX" where XXX is the name
						specified here, converted to Java identifier conventions.
						For finer control, "method-name" could be used, which will
						define the method name literally without translation of any kind.
					</documentation>
				</annotation>
			</attribute>
			<attribute name="type" type="QName" use="optional">
				<annotation>
					<documentation>
						The result type of the expression, given as a QName
					</documentation>
				</annotation>
			</attribute>
			<attributeGroup ref="tns:evaluator-ref">
				<annotation>
					<documentation>
						Select a specific evaluator configuration for the expressions under
						this scope.
						Default: The first evaluator defined.
					</documentation>
				</annotation>
			</attributeGroup>
		</complexType>
	</element>
	<element name="method">
		<annotation>
			<documentation>
				Specification of the evaluation method of the evaluator class that
				will be called when an actual expression result
				is requested via the generated method.
				This method must have the following properties:
				1. It must have a return type that can be cast
				to the return type of any expression that is defined
				in the scope of this evaluator.
				2. If static=static, it mus take the instance of
				the entity on which it evaluates as the first
				argument and the expression itself as the second argument.
				If strategy=instance (the default), it must take the
				expression itself as its only argument.
			</documentation>
		</annotation>
		<complexType>
			<attribute name="name" type="NCName" use="optional">
				<annotation>
					<documentation>
						The method name, must be unique within the surrounding
						evaluator configuration.
					</documentation>
				</annotation>
			</attribute>
			<attribute name="literal" type="boolean" use="optional" default="false">
				<annotation>
					<documentation>
						Usually, an expression is given in the XSD in string form. By default,
						the expression is passed to the evaluation method in generated code in
						string form as well. If literal=true, however, code is generated in
						a way such that the expression is inserted into the evaluation method call
						unquoted. Theoretically, this allows for arbitrary source code to be
						injected at code generation time. This is very flexible, but dangerous,
						language-dependent, and difficult to maintain so the expression can be
						evaluated correctly in the corresponding context.
					</documentation>
				</annotation>
			</attribute>
			<attribute name="type-passing" type="tns:language" use="optional" default="none">
				<annotation>
					<documentation>
						If this is other than "none", the evaluation method will be assumed to have
						an additional parameter denoting the requested result type of the expression.
						The evaluation method will then have to perform the necessary conversions
						and return a compatible type.
						If set to "xml-schema", the additional parameter will have to be of type "QName",
						and it will receive the type as a QName, which matches the type passed as the "type"
						on the corresponding expression customization.
						If set to "java", the additional Parameter will be of type "java.lang.Class&lt;T&gt;",
						where T is the java type literal passed as the "type" attribute on the corresponding expression
						customiztion.
					</documentation>
				</annotation>
			</attribute>
			<attribute name="namespace-aware" type="boolean" default="false">
				<annotation>
					<documentation>
						If true, it will be assumed that the the evaluator method
						has an additional parameter for the namespace mappings.

						The namespace mappings are an array of tuples that map namespace prefixes
						to namespace URIs. Namespace prefixes must be unique, but there can be
						multiple prefixes mapped to the same namespace URI.
						On instantiation, the namespace mappings will be populated
						with the namespaces from the XSD document that the code is generated from.

						This setting overrides the same attribute on the &lt;evaluator&gt; level.
					</documentation>
				</annotation>
			</attribute>
		</complexType>
	</element>
	<element name="expressions">
		<complexType>
			<sequence>
				<element ref="tns:expression" minOccurs="0" maxOccurs="unbounded"/>
			</sequence>
			<attributeGroup ref="tns:evaluator-ref">
				<annotation>
					<documentation>
						Select a specific evaluator configuration for the expressions under
						this scope.
						Default: The first evaluator defined.
					</documentation>
				</annotation>
			</attributeGroup>
		</complexType>
	</element>
	<element name="evaluator">
		<annotation>
			<documentation>
				This binding customization specifies the evaluator class which
				will be called in the generated code to evaluate the given expression.
				If static=false (the default), the class must have a one-argument
				constructor that receives a target instance reference. It will be
				instantiated once per entity instance when an expression on that
				instance is evaluated for the first time.
				If static=true, the class will never be instantiated, it is
				suggested that it is marked "final" and has a private no-arg constructor
				in this case.
			</documentation>
		</annotation>
		<complexType>
			<sequence>
				<element ref="tns:context" minOccurs="0">
					<annotation>
						<documentation>
							Only relevant if strategy=class-instance.
							Defines a class that represents the static
							expression evaluation context, acting as a factory for per-instance
							evaluator objects.
							See the description of the &quot;context&quot; element for details.
						</documentation>
					</annotation>
				</element>
				<element ref="tns:method" minOccurs="0" maxOccurs="unbounded">
					<annotation>
						<documentation>
							Specification of the methods used for evaluation expressions.
							Refer to the definition of the {@see Method} element.
						</documentation>
					</annotation>
				</element>
				<element ref="tns:expression" minOccurs="0" maxOccurs="unbounded">
					<annotation>
						<documentation>
							When an evaluator is defined specific to a generated class,
							expressions to be evaluated can be given right here inside the
							evaluator customization element.
						</documentation>
					</annotation>
				</element>
			</sequence>
			<attribute name="name" type="NCName" use="optional">
				<annotation>
					<documentation>
						Name for this evaluator configuration, can be used
						to reference this evaluator in expression customizations.
						Default: Unqualified class name.
					</documentation>
				</annotation>
			</attribute>
			<attribute name="class" type="string" use="optional">
				<annotation>
					<documentation>
						The fully qualified name of the java class to evaluate all expressions
						defined in this scope.
						If omitted, or strategy-none, methods generated referencing this
						evaluator will contain no call to an evaluator method, but return
						their expression literally. If strategy is other than none, this
						parameter is mandatory.
					</documentation>
				</annotation>
			</attribute>
			<attribute name="field" type="string" use="optional">
				<annotation>
					<documentation>
						Name of the instance field in the generated class to hold the instance
						of the formatter class.
						Default: If "name"is set, __evaluator&lt;name&gt;, if name is not set,
						__evaluator&lt;class&gt;
					</documentation>
				</annotation>
			</attribute>
			<attribute name="strategy" type="tns:evaluator-strategy" use="optional" default="instance">
				<annotation>
					<documentation>
						The strategy how initialization and calling of the evaluator methods should work.
					</documentation>
				</annotation>
			</attribute>
			<attribute name="namespace-aware" type="boolean" default="false">
				<annotation>
					<documentation>
						If true, it will be assumed that the calls to the evaluator methods
						have an additional parameter for the namespace mappings.

						The namespace mappings are an array of tuples that map namespace prefixes
						to namespace URIs. Namespace prefixes must be unique, but there can be
						multiple prefixes mapped to the same namespace URI.
						On instantiation, the namespace mappings will be populated
						with the namespaces from the XSD document that the code is generated from.
					</documentation>
				</annotation>
			</attribute>
		</complexType>
	</element>
	<element name="context">
		<annotation>
			<documentation>
				Only relevant if strategy=class-instance.
				Defines a class that represents the static
				expression evaluation context, acting as a factory for per-instance
				evaluator objects.
			</documentation>
		</annotation>
		<complexType>
			<attribute name="class" type="string" use="required">
				<annotation>
					<documentation>
						The fully qualified name of the java class that represents the static
						expression evaluation context, acting as a factory for per-instance
						evaluator objects. If strategy=class-instance, this parameter is mandatory.

						The context class must have a constructor with the following
						possible signature:

						(Class&lt;?&gt; targetClass)
					</documentation>
				</annotation>
			</attribute>
			<attribute name="method" type="token" use="optional">
				<annotation>
					<documentation>
						The name of the method in the context-class that creates a per-instance
						evaluator object, which will then be assigned to an instance field
						of the target class.
						The method must have one argument that takes the instance of the target
						class.
					</documentation>
				</annotation>
			</attribute>
			<attribute name="field" type="string" use="optional">
				<annotation>
					<documentation>
						Name of the static field in the generated class to hold the instance
						of the context class.
						Default: __CONTEXT_&lt;class&gt;
					</documentation>
				</annotation>
			</attribute>
		</complexType>
	</element>
	<element name="evaluators">
		<annotation>
			<documentation>
				Collection of evaluator configurations.
				The default implementation of XJC only supports
				on plugin customization element od a specific type,
				so if we want to specify more we have
				to wrap them in a common parent.
			</documentation>
		</annotation>
		<complexType>
			<sequence>
				<element ref="tns:evaluator" minOccurs="1" maxOccurs="unbounded"/>
			</sequence>
		</complexType>
	</element>
</schema>
